{"version":3,"sources":["Api/api.ts","Api/weatherApi.ts","Redux/weather-reducer.ts","Components/InputData/InputData.tsx","Components/DisplayWeather/DisplayData.tsx","App.tsx","reportWebVitals.ts","Redux/store.ts","index.tsx"],"names":["instance","axios","create","withCredentials","baseURL","headers","weatherApi","searchString","get","result","data","console","log","currentCity","initialState","tzId","city","temperatureC","temperatureF","feelsLikeC","feelsLikeF","isCelsius","actions","type","payload","weatherReducer","state","action","_","Complete","React","memo","useState","value","setValue","options","setOptions","cities","useSelector","dispatch","useDispatch","fillAutocomplete","text","length","then","undefined","Array","map","c","push","name","catch","err","style","width","onSelect","location","tz_id","current","temp_c","temp_f","feelslike_c","feelslike_f","onSearch","searchText","onChange","marginTop","checkedChildren","unCheckedChildren","defaultChecked","DisplayData","gutter","span","title","moment","format","App","offset","direction","level","paddingBottom","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d626a4fd.chunk.js","sourcesContent":["import axios from \"axios\";\n//https://api.weatherapi.com/v1/forecast.json?key=1986480656ec490d950204923202611&q=Moscow\nexport const instance = axios.create({\n    withCredentials: false,\n    baseURL: 'https://api.weatherapi.com/',\n    headers: {\n        \"key\": \"1986480656ec490d950204923202611\",\n    }\n});\n","import {instance} from \"./api\";\nimport {AutoCompleteSearchType, CurrentCityType} from \"../Types/types\";\n\nexport const weatherApi = {\n    async autocompleteSearch(searchString: string) {\n        try {\n            const result = await instance.get<AutoCompleteSearchType>('v1/search.json?key=1986480656ec490d950204923202611&q=' + searchString);\n            return await result.data;\n        } catch (err) {\n            console.log(err);\n        }\n    },\n\n    async getCurrentCityInfo(currentCity: string) {\n        try {\n            const result = await instance.get<CurrentCityType | undefined>('v1/current.json?key=1986480656ec490d950204923202611&q=' + currentCity);\n            return await result.data;\n        } catch (err) {\n            console.log(err);\n        }\n    }\n}\n\n","import {InferActionsTypes} from \"./store\";\nimport * as _ from 'lodash';\n\nlet initialState = {\n    tzId: '-',\n    city: '-',\n    temperatureC: '-',\n    temperatureF: '-',\n    feelsLikeC: '-',\n    feelsLikeF: '-',\n    isCelsius: true\n}\n\nconst weatherReducer = (state = initialState, action: ActionsTypes): InitialState => {\n    switch (action.type) {\n        case 'WEATHER/SET_WEATHER':\n            return _.merge(state, action.payload)\n        case 'WEATHER/SET_FORMAT':\n            return _.merge(state, action.payload)\n        case 'WEATHER/GET_WEATHER':\n            return state;\n        default:\n            return state;\n    }\n}\n\nexport const actions = {\n    setWeather: (tzId: string, city: string, temperatureC: number,\n                 temperatureF: number, feelsLikeC: number, feelsLikeF: number, isCelsius: boolean) =>\n        ({type: 'WEATHER/SET_WEATHER', payload: {tzId, city, temperatureC, temperatureF, feelsLikeC, feelsLikeF, isCelsius}} as const),\n    getWeather: () => ({type: 'WEATHER/GET_WEATHER'} as const),\n    setFormat: (isCelsius: boolean) => ({type: 'WEATHER/SET_FORMAT', payload: {isCelsius}} as const),\n}\n\nexport default weatherReducer;\ntype ActionsTypes = InferActionsTypes<typeof actions>;\ntype InitialState = typeof initialState;","import React, {useState} from 'react';\nimport {AutoComplete, Switch} from 'antd';\nimport {weatherApi} from \"../../Api/weatherApi\";\nimport {useDispatch, useSelector} from 'react-redux'\nimport {actions} from \"../../Redux/weather-reducer\";\nimport {CityType} from \"../../Types/types\";\nimport {AppStateType} from \"../../Redux/store\";\n\nexport const Complete: React.FC = React.memo(() => {\n    const [value, setValue] = useState('');\n    const [options, setOptions] = useState<{ value: string }[]>([]);\n    let cities: Array<CityType> = [];\n    let isCelsius = useSelector((state: AppStateType) => state.weatherReducer.isCelsius);\n    const dispatch = useDispatch();\n    const onSearch = (searchText: string) => {\n        fillAutocomplete(searchText);\n    };\n\n    const fillAutocomplete = (text: string) => {\n        if (text.length > 0) {\n            const data = weatherApi.autocompleteSearch(text);\n            data.then(result => {\n                if (result !== undefined && result instanceof Array) {\n                    result.map((c: { name: string }) => cities.push({'value': c.name}));\n                }\n            }).then(() => setOptions(\n                !text ? [] : cities\n            )).catch(err => {\n                console.log(err)\n            })\n        }\n    }\n\n    const setCurrentCityInfo = (city: string) => {\n        const data = weatherApi.getCurrentCityInfo(city);\n\n        data.then(result => {\n            if (result !== undefined) {\n                dispatch(actions.setWeather(result.location.tz_id, result.location.name, result.current.temp_c,\n                    result.current.temp_f, result.current.feelslike_c, result.current.feelslike_f, isCelsius));\n\n            }\n        }).catch(err => {\n            console.log('Error dispatching data: ', err);\n        })\n    }\n\n    const onSelect = (data: string) => {\n        setCurrentCityInfo(data);\n    };\n\n    const onChange = (data: string) => {\n        setValue(data);\n    };\n    const onChangeSwitch = (value: boolean) => {\n        dispatch(actions.setFormat(value));\n    }\n\n    return (\n        <>\n            <div>\n                <AutoComplete\n                    value={value}\n                    options={options}\n                    style={{width: 300}}\n                    onSelect={onSelect}\n                    onSearch={onSearch}\n                    onChange={onChange}\n                />\n            </div>\n            <div style={{marginTop: 25}}>\n                <Switch checkedChildren=\"C\"\n                        unCheckedChildren=\"F\"\n                        defaultChecked\n                        onChange={onChangeSwitch}/>\n            </div>\n        </>\n    );\n})","import React from 'react';\nimport {Statistic, Row, Col} from 'antd';\nimport moment from 'moment';\nimport {useSelector} from \"react-redux\";\nimport {AppStateType} from \"../../Redux/store\";\n\nexport const DisplayData: React.FC = () => {\n\n    const city = useSelector((state: AppStateType) => state.weatherReducer.city);\n    const isCelsius = useSelector((state: AppStateType) => state.weatherReducer.isCelsius);\n    const temperatureC = useSelector((state: AppStateType) => state.weatherReducer.temperatureC);\n    const temperatureF = useSelector((state: AppStateType) => state.weatherReducer.temperatureF);\n    const feelsLikeC = useSelector((state: AppStateType) => state.weatherReducer.feelsLikeC);\n    const feelsLikeF = useSelector((state: AppStateType) => state.weatherReducer.feelsLikeF);\n\n    return (\n        <>\n            <Row gutter={16}>\n                <Col span={12}>\n                    <Statistic title=\"City\" value={city}/>\n                </Col>\n                <Col span={12}>\n                    <Statistic title=\"Date\" value={moment().format('MMM Do YY')}/>\n                </Col>\n                <Col span={12}>\n                    <Statistic title=\"Temperature\" value={isCelsius ? temperatureC : temperatureF}/>\n                </Col>\n                <Col span={12}>\n                    <Statistic title=\"Feels like\" value={isCelsius ? feelsLikeC : feelsLikeF}/>\n                </Col>\n            </Row>\n        </>\n    )\n};\n\n","import React from 'react';\nimport \"antd/dist/antd.css\";\nimport {Card, Col, Row, Space} from \"antd\";\nimport { Complete } from './Components/InputData/InputData';\nimport { DisplayData } from './Components/DisplayWeather/DisplayData';\nimport Title from \"antd/lib/typography/Title\";\n\nconst App: React.FC<any> = () => {\n    return (\n            <Row>\n                <Col span={12} offset={8}>\n                    <Space direction=\"vertical\">\n                        <Card title={<Title level={3}>WeatherApp</Title>} style={{ width: 400}}>\n                            <div style={{paddingBottom:20}}>\n                                <Complete />\n                            </div>\n                            <DisplayData/>\n                        </Card>\n                    </Space>\n                </Col>\n            </Row>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\nimport thunkMiddleware, {ThunkAction} from \"redux-thunk\";\nimport weatherReducer from \"./weather-reducer\";\n\nlet rootReducer = combineReducers({\n    weatherReducer: weatherReducer,\n})\n\n// Create type for all reducers.\ntype RootReducerType = typeof rootReducer;\n\n// Create type for all state.\nexport type AppStateType = ReturnType<RootReducerType>\n\n// Create type for all actions.\nexport type InferActionsTypes<T> = T extends { [keys: string]: (...args: any[]) => infer U } ? U : never\n\n// Create type for thunks.\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\n\n// Add DevTools.\n// @ts-ignore\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunkMiddleware)))\n\nexport default store\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux'\nimport store from './Redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}